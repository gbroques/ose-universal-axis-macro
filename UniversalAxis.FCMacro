import FreeCAD as App
import FreeCADGui as Gui
import Part
from FreeCAD import Base


def main():
    document = App.newDocument('Universal Axis')
    create_universal_axis(document, 'UniversalAxisX')

    # Re-center view
    Gui.SendMsgToActiveView('ViewFit')


def create_universal_axis(document, name):
    """
    Create a universal axis object.
    """
    obj = document.addObject('Part::FeaturePython', name)
    fpo = UniversalAxis(obj)
    obj.ViewObject.Proxy = 0  # Mandatory unless ViewProvider is coded
    document.recompute()
    return fpo


class UniversalAxis:
    """
    Modular and scalable CNC axis used to create cartesian CNC machines.

    See Also:
        https://wiki.opensourceecology.org/wiki/Universal_CNC_Axis
    """

    def __init__(self, obj):
        """
        Constructor

        Arguments
        ---------
        - obj: Created with document.addObject('Part::FeaturePython', '{name}')
        """
        self.Type = 'OSEUniversalAxis'

        obj.Proxy = self

        # Length property
        length_tooltip = 'Length of axis corresponds to rod length.'
        obj.addProperty('App::PropertyLength', 'Length', 'Base', length_tooltip)
        obj.Length = 304.80

        # Rod Diameter property
        rod_diameter_tooltip = 'Diameter of rod.'
        read_only = 1
        obj.addProperty('App::PropertyLength', 'RodDiameter', 'Base', rod_diameter_tooltip, read_only)
        obj.RodDiameter = 8

    def execute(self, obj):
        """
        Called on document recompute
        """
        # Get rod dimensions
        rod_length = obj.Length.Value
        rod_radius = obj.RodDiameter.Value / 2

        # Motor side, idler side, and carriage boxes share same height
        box_height = 24

        # Define dimensions of motor side box
        motor_box_width = 59.5
        motor_box_length = 66
        motor_side_box_dimensions = (motor_box_width, motor_box_length, box_height)

        # Make motor side box
        motor_side_box = Part.makeBox(*motor_side_box_dimensions)

        # Define dimensions of idler side box
        idler_box_width = 55
        idler_box_length = 66
        idler_side_box_dimensions = (idler_box_width, idler_box_length, box_height)

        # Make idler
        idler_side_box = Part.makeBox(*idler_side_box_dimensions)
        idler_side_box.translate(Base.Vector(rod_length - idler_box_width, 0, 0))

        space_between_rod_and_box_edge = 10
        half_box_height = box_height / 2

        rod1_y_position = idler_box_length - space_between_rod_and_box_edge

        rod1 = Part.makeCylinder(rod_radius, rod_length)
        rod1.rotate(Base.Vector(0, 0, 0), Base.Vector(0, 1, 0), 90)
        rod1.translate(Base.Vector(0, rod1_y_position, half_box_height))

        rod2_y_position = space_between_rod_and_box_edge
        rod2 = Part.makeCylinder(rod_radius, rod_length)
        rod2.rotate(Base.Vector(0, 0, 0), Base.Vector(0, 1, 0), 90)
        rod2.translate(Base.Vector(0, rod2_y_position, half_box_height))

        obj.Shape = Part.makeCompound([
            motor_side_box,
            idler_side_box,
            rod1,
            rod2
        ])

    def __getstate__(self):
        return self.Type

    def __setstate__(self, state):
        if state:
            self.Type = state


if __name__ == '__main__':
    main()
